data {
  int<lower=1> N1;
  int<lower=1> N2;
  matrix[N1, 2] x;
  matrix[N1, 2] errx;
  matrix[N2, 2] xsin;
  matrix[N2, 2] errxsin;
}


parameters {
  vector[2] mu;
  real<lower=0> sigma[2];
  real<lower=-1, upper=1> rho;
  matrix[N1, 2] xreal;
  matrix[N2, 2] xsinreal;
  vector<lower=0, upper=pi()/2>[N2] angle;
}


transformed parameters {
  cov_matrix[2] cov = 
  [[sigma[1]^ 2, sigma[1]*sigma[2]*rho],
  [sigma[1]*sigma[2]* rho, sigma[2]^2]];
}


model {
  for (i in 1:N1) {
    x[i] ~ normal(xreal[i], errx[i]);
  }
  for (i in 1:N2) {
    xsin[i,1] ~ normal(xsinreal[i,1], errxsin[i,1]);
    xsin[i,2] ~ normal(xsinreal[i,2] * sin(angle[i]), errxsin[i,2]);
  }
  
  for (i in 1:N1)
    xreal[i] ~ multi_normal(mu,cov);
  for (i in 1:N2)
    xsinreal[i] ~ multi_normal(mu, cov);
  sigma ~ cauchy(0., 10.);
  mu ~ normal(0., 100.);
}

  
generated quantities {
  vector[2] mockx;
  mockx = multi_normal_rng(mu, cov);
}